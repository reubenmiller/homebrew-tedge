#!/bin/sh
set -e

help() {
    cat << EOT >&2
thin-edge.io adapter to homebrew to control services

SUBCOMMANDS
    reboot
    services <start|restart|stop|is_available|enable|disable|is_active> <SERVICE_NAME>

EXAMPLES
    $0 reboot
    # Trigger a fake reboot

    $0 services start tedge-agent
    # Start tedge-agent

    $0 services stop tedge-agent
    # Stop tedge-agent

    $0 services restart tedge-agent
    # Restart tedge-agent
EOT
}

if [ $# -lt 1 ]; then
    help
    exit 1
fi

command_exists() {
    command -V "$1" >/dev/null 2>&1
}


# 
# Find brew path
#
BREW="${BREW:-brew}"

# Use full path to brew
if ! command_exists "$BREW"; then
    if [ -f /opt/homebrew/bin/brew ]; then
        BREW="/opt/homebrew/bin/brew"
    elif [ -f /usr/local/bin/brew ]; then
        BREW="/usr/local/bin/brew"
    elif [ -f /home/linuxbrew/.linuxbrew/bin/brew ]; then
        BREW="/home/linuxbrew/.linuxbrew/bin/brew"
    fi
fi

COMMAND="$1"
shift

service_mgmt() {
    SUBCOMMAND="$1"
    shift
    NAME=

    if [ $# -gt 0 ]; then
        NAME="$1"

        # Use alias due to a limitation in the homebrew service naming
        if [ "$NAME" = "tedge-mapper-c8y" ]; then
            NAME=tedge-mapper-cumulocity
        fi
        shift
    fi

    fail_if_empty() {
        if [ -z "$1" ]; then
            echo "Service name is empty" >&2
            exit 1
        fi
    }

    case "$SUBCOMMAND" in
        is_available)
            "$BREW" services --help >/dev/null 2>&1
            ;;
        is_active)
            fail_if_empty "$NAME"
            "$BREW" services info "$NAME" | grep -q "PID:"
            ;;
        restart)
            fail_if_empty "$NAME"
            "$BREW" services restart "$NAME"
            ;;
        start)
            fail_if_empty "$NAME"
            "$BREW" services start "$NAME"
            ;;
        stop)
            fail_if_empty "$NAME"
            "$BREW" services stop "$NAME"
            ;;
        enable|disable)
            # no-op
            exit 0
            ;;
        *)
            echo "Unknown command: '$SUBCOMMAND'" >&2
            exit 1
            ;;
    esac
}


case "$COMMAND" in 
    services)
        service_mgmt "$@"
        ;;
    
    reboot)
        echo "simulating a restart"
        exit 0
        ;;
    *)
        echo "Unknown command: '$COMMAND'" >&2
        exit 1
        ;;

esac

exit 0
